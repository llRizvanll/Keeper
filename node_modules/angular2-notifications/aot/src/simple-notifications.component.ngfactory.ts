/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../src/simple-notifications.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../src/notifications.service';
import * as import10 from '../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import11 from '@angular/core/src/linker/view_container';
import * as import12 from '../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import13 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import14 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from '@angular/common/src/directives/ng_for';
import * as import18 from '@angular/common/src/directives/ng_class';
import * as import19 from '../../src/notification.component';
import * as import20 from './notification.component.ngfactory';
import * as import21 from '@angular/platform-browser/src/security/dom_sanitization_service';
import * as import22 from '@angular/core/src/zone/ng_zone';
export class Wrapper_SimpleNotificationsComponent {
  /*private*/ _eventHandler:Function;
  context:import0.SimpleNotificationsComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.SimpleNotificationsComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.options = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onCreate.subscribe(_eventHandler.bind(view,'onCreate'))); }
    if (emit1) { (this.subscription1 = this.context.onDestroy.subscribe(_eventHandler.bind(view,'onDestroy'))); }
  }
}
var renderType_SimpleNotificationsComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_SimpleNotificationsComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.SimpleNotificationsComponent>;
  _SimpleNotificationsComponent_0_3:Wrapper_SimpleNotificationsComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SimpleNotificationsComponent_Host0,renderType_SimpleNotificationsComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'simple-notifications',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_SimpleNotificationsComponent0(this.viewUtils,this,0,this._el_0);
    this._SimpleNotificationsComponent_0_3 = new Wrapper_SimpleNotificationsComponent(this.injectorGet(import9.NotificationsService,this.parentIndex));
    this.compView_0.create(this._SimpleNotificationsComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._SimpleNotificationsComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.SimpleNotificationsComponent) && (0 === requestNodeIndex))) { return this._SimpleNotificationsComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._SimpleNotificationsComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._SimpleNotificationsComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const SimpleNotificationsComponentNgFactory:import8.ComponentFactory<import0.SimpleNotificationsComponent> = new import8.ComponentFactory<import0.SimpleNotificationsComponent>('simple-notifications',View_SimpleNotificationsComponent_Host0,import0.SimpleNotificationsComponent);
const styles_SimpleNotificationsComponent:any[] = ['\n        .simple-notification-wrapper {\n            position: fixed;\n            width: 300px;\n            z-index: 1000;\n        }\n        \n        .simple-notification-wrapper.left { left: 20px; }\n        .simple-notification-wrapper.top { top: 20px; }\n        .simple-notification-wrapper.right { right: 20px; }\n        .simple-notification-wrapper.bottom { bottom: 20px; }\n        \n        @media (max-width: 340px) {\n            .simple-notification-wrapper {\n                width: auto;\n                left: 20px;\n                right: 20px;\n            }\n        }\n    '];
var renderType_SimpleNotificationsComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_SimpleNotificationsComponent,{});
export class View_SimpleNotificationsComponent0 extends import2.AppView<import0.SimpleNotificationsComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import10.Wrapper_NgClass;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import11.ViewContainer;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import12.Wrapper_NgFor;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SimpleNotificationsComponent0,renderType_SimpleNotificationsComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','simple-notification-wrapper'),(null as any));
    this._NgClass_1_3 = new import10.Wrapper_NgClass(this.parentView.injectorGet(import13.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import14.KeyValueDiffers,this.parentIndex),new import15.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import11.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import16.TemplateRef_(this,3,this._anchor_3);
    this._NgFor_3_6 = new import12.Wrapper_NgFor(this._vc_3.vcRef,this._TemplateRef_3_5,this.parentView.injectorGet(import13.IterableDiffers,this.parentIndex),this.ref);
    this._text_4 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import17.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6.context; }
    if (((token === import18.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgClass_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = 'simple-notification-wrapper';
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.position;
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = this.context.notifications;
    this._NgFor_3_6.check_ngForOf(currVal_3_0_0,throwOnChange,false);
    this._NgFor_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_SimpleNotificationsComponent1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
}
class View_SimpleNotificationsComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import19.NotificationComponent>;
  _NotificationComponent_0_3:import20.Wrapper_NotificationComponent;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import11.ViewContainer) {
    super(View_SimpleNotificationsComponent1,renderType_SimpleNotificationsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'simple-notification',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_0 = new import20.View_NotificationComponent0(this.viewUtils,this,0,this._el_0);
    this._NotificationComponent_0_3 = new import20.Wrapper_NotificationComponent(this.parentView.parentView.injectorGet(import9.NotificationsService,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import21.DomSanitizer,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import22.NgZone,this.parentView.parentIndex));
    this._text_1 = this.renderer.createText((null as any),'\n            ',(null as any));
    this.compView_0.create(this._NotificationComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.NotificationComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NotificationComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.timeOut;
    this._NotificationComponent_0_3.check_timeOut(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.showProgressBar;
    this._NotificationComponent_0_3.check_showProgressBar(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.pauseOnHover;
    this._NotificationComponent_0_3.check_pauseOnHover(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.clickToClose;
    this._NotificationComponent_0_3.check_clickToClose(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.maxLength;
    this._NotificationComponent_0_3.check_maxLength(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.theClass;
    this._NotificationComponent_0_3.check_theClass(currVal_0_0_5,throwOnChange,false);
    const currVal_0_0_6:any = this.parentView.context.rtl;
    this._NotificationComponent_0_3.check_rtl(currVal_0_0_6,throwOnChange,false);
    const currVal_0_0_7:any = this.parentView.context.animate;
    this._NotificationComponent_0_3.check_animate(currVal_0_0_7,throwOnChange,false);
    const currVal_0_0_8:any = this.context.index;
    this._NotificationComponent_0_3.check_position(currVal_0_0_8,throwOnChange,false);
    const currVal_0_0_9:any = this.context.$implicit;
    this._NotificationComponent_0_3.check_item(currVal_0_0_9,throwOnChange,false);
    this._NotificationComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._NotificationComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}